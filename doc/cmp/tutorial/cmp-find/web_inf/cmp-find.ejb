<?xml version="1.0"?>

<!-- 
   - Deployment Descriptor for examples.cmp.find.*
   -
   - To make development less of a hassle, Resin-CMP will recognize
   - all *.ejb files that are stored in EjbServlet's WEB-INF
   - directory as deployment descriptors.
  -->

<ejb-jar xmlns="http://caucho.com/ns/resin">
  <enterprise-beans>
    <entity>
      <ejb-name>find_CourseBean</ejb-name>

      <!-- The three files classes/interface required by all EJBs -->
      <local-home>example.cmp.find.CourseHome</local-home>
      <local>example.cmp.find.Course</local>
      <ejb-class>example.cmp.find.CourseBean</ejb-class>

      <!-- Indicate you want Resin-CMP to manage database persistance. 
         - Bean Managed Persistance (BMP) is also supported, 
         - but really would defeat the point.
        -->
      <persistence-type>Container</persistence-type>

      <!-- With CMP, all entities/tables must have a unique primary key -->
      <prim-key-class>java.lang.String</prim-key-class>

      <!-- Unlike session beans, entity beans can be re-entrant. -->
      <reentrant>False</reentrant>

      <!--
         - Abstract schema name used by the EJB-QL queries for this
         - bean.
        -->
      <abstract-schema-name>courses</abstract-schema-name>
      <!--
         - The actual database table used for the example.
        -->
      <sql-table>find_courses</sql-table>

      <!-- Set up a cmp-field element for each property of your
         - bean that you want Resin-CMP to keep persistant.
         -
         - each entry has to me matched in the implementation class
         - with an abstract method declaration, i.e.:
         -  
         -  public abstract String getCourseId();
         -  public abstract void setCourseId( String val );
         -
         - These will be implemented by Resin-CMP at deploy-time.
         -
        -->
      <cmp-field>
        <field-name>courseId</field-name>
      </cmp-field>
      <cmp-field>
        <field-name>instructor</field-name>
      </cmp-field>

      <primkey-field>courseId</primkey-field>

      <!--
         - Instead of using JDBC within your beans you have to write
         - EJB-QL in the deployment descriptor for all queries.
        -->
      <query>
        <!--
           - Each query element pertains to a particular method.
           - You need to define the method in the local interface, i.e.
           -  public Collection findAll()
           -    throws FinderException;
          --> 
         <query-method>
           <method-name>findAll</method-name>
          </query-method>

        <!-- EJB-QL is a generic query languages that Resin-CMP can translate
           - to datastore-specific formats, such as SQL.
           -->
        <ejb-ql>
          <![CDATA[SELECT o FROM courses o]]>
        </ejb-ql>
      </query>

      <query>
         <query-method>
           <method-name>findByInstructor</method-name>
           <method-params>
             <method-param>java.lang.String</method-param>
           </method-params>
          </query-method>

        <!--
           - EJB-QL is a generic query languages that Resin-CMP can translate
           - to datastore-specific formats, such as SQL.
          -->
        <ejb-ql>
          <![CDATA[SELECT o FROM courses o WHERE o.instructor = ?1]]>
        </ejb-ql>
      </query>
    </entity>
  </enterprise-beans>
</ejb-jar>