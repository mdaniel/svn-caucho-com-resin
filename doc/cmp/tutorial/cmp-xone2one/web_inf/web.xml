<web-app xmlns="http://caucho.com/ns/resin">
  <class-loader>
    <make-loader path="WEB-INF/classes">
      <ejb-doclet srcdir="WEB-INF/classes"/>
    </make-loader>

    <compiling-loader path="WEB-INF/classes"/>
  </class-loader>

  <!--
     - Configures the EJB server resource, using the
     - java:comp/env/jdbc/test data source.
     -
     - The ejb-server defaults to java:comp/env/cmp, although
     - that can be changed with the 'name' attribute.
     -
     - ejb-server will pick up the WEB-INF/cmp-one2one.ejb file
     - automatically.
    -->
  <ejb-server jndi-name="cmp">
    <data-source>jdbc/resin</data-source>
    <config-directory>WEB-INF</config-directory>
    <create-database-schema/>
  </ejb-server>

  <!--
     - Configures the demo servlet.
     -
     - This example uses a Resin extension for bean-style servlet
     - initialization.  Resin will call the setCourseHome method with
     - the course's home interface found using the JNDI lookup.  It will
     - similarly configure the setTeacherHome.
    -->
  <servlet servlet-name="client"
	   servlet-class="example.ClientServlet">
    <init>
      <course-home>${jndi:lookup("cmp/course")}</course-home>
      <teacher-home>${jndi:lookup("cmp/teacher")}</teacher-home>
    </init>
  </servlet>

  <servlet-mapping url-pattern="/xclient" servlet-name="client"/>

  <!--
     - servlet to initialize the database
    -->
  <servlet servlet-name="init"
	   servlet-class="example.InitServlet">
    <init>
      <data-source>${jndi:lookup("jdbc/resin")}</data-source>
    </init>
    <load-on-startup/>
  </servlet>
</web-app>
