namespace local = ""
namespace L = ""

default namespace resin = "http://caucho.com/ns/resin"
namespace d = "urn:java:com.caucho.config.driver"

namespace rcore = "http://caucho.com/ns/resin/core"
namespace r = "urn:java:com.caucho.resin"

include "resin-j2ee.rnc"

r_boolean-Type =
  "true"
  | "false"
  | "yes"
  | "no"

r_jndi = string
r_int = string
r_period = string
r_kbytes = string

r_path-Type =  string
r_int-Type = string
r_double-Type = string
r_period-Type = string
r_kbytes-Type = string
r_jndi-Type = string
r_class-Type = string
r_object-Type = string

r_string-Group =
  string
  | r_bean-Custom

r_any-Group = text | (attribute * {string} | element * { r_any-Group })*

## mbean binding signature
r_binding =
  attribute binding { string }
  | element binding { string }

## The basic environment tags
r_env-Basis =
  r_authenticator*

  & r_bam-service*
  
  & r_bean*

  & r_bean-Custom*

  & r_case-insensitive?

  & r_character-encoding?

  & r_class-loader*

  & r_component*

  & r_connection-factory*

  & r_connector*

  & r_database*

  & r_database-default*

  & r_data-source*

  & r_dependency*

  & r_dependency-check-interval?

  & r_ejb-message-bean*

  & r_ejb-server*

  & r_ejb-stateful-bean*

  & r_ejb-stateless-bean*

  & r_env-entry*

  & r_grant*

  & rcore_import*

  & r_interceptor*

  & r_javac?

  & r_jms-connection-factory*

  & r_jms-queue*

  & r_jms-topic*

  & r_jpa-persistence-unit*

  & r_jpa-persistence-unit-default*

  & r_jndi-link*

  & r_log*

  & r_logger*

  & r_log-handler*

  & r_mail*
  
  & r_reference*

  & r_remote-client*

  & r_resource*

  & r_resource-adapter*

  & r_resource-default*

  & r_resource-deploy*

  & r_role-map*
  
  & r_scheduled-task*

  & r_stderr-log?

  & r_stdout-log?

  & r_system-property*

  & r_temp-dir?

  & r_web-service-client*

  & r_work-dir?

  & rcore_message*

  & rcore_set*

## The environment, including control structures
r_env-Flow =
  r_env-Basis

  & element rcore:env|r:env { r_env-Flow }*

  & element rcore:if|r:if { rcore_if-Args, r_env-Flow }*

  & element rcore:choose|r:choose {
      element rcore:when|r:when { rcore_when-Args, r_env-Flow }+,
      element rcore:otherwise|r:otherwise { r_env-Flow }?
    }*

## The environment contents
r_env-Content = r_env-Flow
r_env-Group = r_env-Flow

## Configures a JCA activation-spec for message beans
r_activation-spec = element activation-spec {
  r_bean-Content
}

## Configures authentication for the current environment
r_authenticator = element authenticator {
  r_bean-Content
}

r_arg = element arg { r_any-Group }

r_bam-service = element bam-service {
  r_bean-Content

  & (attribute thread-max { string }
     | element thread-max { string })?
}

## singleton bean
r_bean = element bean {
  r_bean-Content

  & r_mbean-name?

  & r_mbean-interface?
}

r_bean-Content =
  r_jndi-name?
 
  & r_name?
   
  & (r_driver-Bean

     | ((r_uri | r_class | r_type | r_bean-Custom)?

        & r_binding*

        & r_init?

        & element param { r_any-Group }*

        & r_scope?))     

## custom bean from namespace

r_bean-Custom =
  element * - resin:* - rcore:* {
    r_any-Group
  }

## If true, paths are treated as case-insensitive in the current environment
r_case-insensitive =
  attribute case-insensitive { r_boolean-Type }
  | element case-insensitive { r_boolean-Type }

## The default character encoding for the current environment
r_character-encoding =
  attribute character-encoding { string }
  | element character-encoding { r_string-Group }

r_class =
  attribute class { string }
  | element class { r_string-Group }

## Consigures class-loaders to the current environment
r_class-loader = element class-loader {
  r_compiling-loader*

  & r_dependency-Class-Loader*
  
  & r_ivy-loader*

  & r_library-loader*
  
  & r_project-loader*
  
  & r_simple-loader*

  & r_servlet-hack?

  & r_tree-loader*
}

r_class-loader-Group =
  r_class-loader?

r_compiling-loader = element compiling-loader {
  r_path

  & (attribute args { string }
     | element args { r_string-Group })*

  & (attribute batch { string }
     | element batch { r_string-Group })?

  & (attribute encoding { string }
     | element encoding { r_string-Group })?

  & (attribute require-source { r_boolean-Type }
     | element require-source { r_boolean-Type })?

  & (attribute source { r_path-Type }
     | element source { r_path-Type })?

  & (attribute source-extension { string }
     | element source-extension { r_string-Group })?

  & (attribute compiler { string }
     | element compiler { r_string-Group })?
}

## webbeans component
r_component = element component {
  r_bean-Content

  & (attribute producer { string }
     | element producer { string })?
}

## Configures the database connection for the database pool
r_connection-Database = element connection {
  (attribute catalog { string }
   | element catalog { r_string-Group })?

  & (attribute read-only { r_boolean-Type }
     | element read-only { r_boolean-Type })?

  & (attribute transaction-isolation { string }
     | element transaction-isolation { r_string-Group })?
}

r_connection-factory = element connection-factory {
  r_bean-Content

  & (attribute local-transaction-optimization { r_boolean-Type }
     | element local-transaction-optimization { r_boolean-Type })?

  & (attribute max-active-time { r_period-Type }
     | element max-active-time { r_period-Type })?

  & (attribute max-connections { r_int-Type }
     | element max-connections { r_int-Type })?

  & (attribute resource-adapter { string }
     | element resource-adapter { string | r_bean-Content })?

  & (attribute shareable { r_boolean-Type }
     | element shareable { r_boolean-Type })?
}

## Configures a JCA connector, either from a .rar file or direct
r_connector = element connector {
  (r_type | r_class | r_uri)

  & r_init?

  & r_name?

  & r_resource-adapter?

  & r_connection-factory*

  & r_connector-message-listener*

  & r_connector-resource*
}

r_connector-message-listener = element message-listener {
  r_type?

  & r_init?

  & r_endpoint-factory
}

r_connector-resource = element resource|bean {
  r_jndi-name?

  & r_name?

  & (r_type|r_class)?

  & r_init?
}

r_dependency-Class-Loader = element dependency {
   r_module-name-Type
}

r_ejb-message-bean = element ejb-message-bean {
  r_bean-Content

  & ((r_activation-spec | r_bean-Custom)?

     | ((attribute destination { string }
        | element destination { string })?

       & (attribute destination-type { string }
         | element destination-type { string })?

       & (attribute destination-name { string }
          | element destination-name { string })?

       & (attribute destination-binding { string }
          | element destination-binding { string })*

       & (attribute message-consumer-max { r_int-Type }
          | element message-consumer-max { r_int-Type })?
       )
   )
}

r_ejb-stateless-bean = element ejb-stateless-bean {
  r_bean-Content
}

r_ejb-stateful-bean = element ejb-stateful-bean {
  r_bean-Content
}

## Configures a JDBC database pool in the current environment
r_database = element database {
  r_bean-Custom*
  
  & r_connection-Database?

  & r_driver*

  & r_database-Content

  & r_jndi-name?

  & r_name?

  & (attribute password { string }
     | element password { r_string-Group })?

  & (attribute ping-table { string }
     | element ping-table { r_string-Group })?

  & (attribute ping-query { string }
     | element ping-query { r_string-Group })?

  & (attribute user { string }
     | element user { r_string-Group })?
}


r_database-default = element database-default {
  r_database-Content
}

r_database-Content =
  (attribute close-dangling-connections { r_boolean-Type }
     | element close-dangling-connections { r_boolean-Type })?

  & (attribute connection-wait-time { r_period }
     | element connection-wait-time { r_period })?

  & (attribute max-active-time { r_period }
     | element max-active-time { r_period })?

  & (attribute commit-on-timeout { r_boolean-Type }
     | element commit-on-timeout { r_boolean-Type })?

  & (attribute max-close-statements { r_int }
     | element max-close-statement { r_int })?

  & (attribute max-connections { r_int }
     | element max-connections { r_int })?

  & (attribute max-create-connections { r_int }
     | element max-create-connections { r_int })?

  & (attribute max-idle-count { r_int }
     | element max-idle-count { r_int })?

  & (attribute max-idle-time { r_period }
     | element max-idle-time { r_period })?

  & (attribute max-overflow-connections { r_int }
     | element max-overflow-connections { r_int })?

  & (attribute max-pool-time { r_period }
     | element max-pool-time { r_period })?

  & (attribute min-idle-count { r_int }
     | element min-idle-count { r_int })?

  & (attribute ping { r_boolean-Type }
     | element ping { r_boolean-Type })?

  & (attribute ping-interval { r_period }
     | element ping-interval { r_period })?

  & (attribute prepared-statement-cache-size { r_int }
     | element prepared-statement-cache-size { r_int })?

  & (attribute save-allocation-stack-trace { r_boolean-Type }
     | element save-allocation-stack-trace { r_boolean-Type })?

  & (attribute spy { r_boolean-Type }
     | element spy { r_boolean-Type })?

  & (attribute transaction-timeout { r_period }
     | element transaction-timeout { r_period })?

  & (attribute xa { r_boolean-Type }
     | element xa { r_boolean-Type })?

  & (attribute xa-forbid-same-rm { r_boolean-Type }
     | element xa-forbid-same-rm { r_boolean-Type })?

  & (attribute wrap-statements { r_boolean-Type }
     | element wrap-statements { r_boolean-Type })?

r_driver_data-source =
  attribute data-source { string }
  | element data-source { r_string-Group }

r_dependency = element dependency {
  (attribute path { string }
   | element path { r_string-Group })
}

## How often classes and files are checked for automatic reloads
r_dependency-check-interval =
  attribute dependency-check-interval { r_period }
  | element dependency-check-interval { r_period }

## Configures the database driver for the database pool
r_driver = element (driver|backup-driver) {
  ((r_class | r_type)?

   & r_url?

   & r_any-Group?)

  | r_driver_data-source
}

r_driver-Bean = element d:* {
  r_any-Group
}

r_endpoint-factory = element endpoint-factory {
  r_type,

  r_init?
}

rcore_env-Args =
  r_class-loader?

r_ejb-server = element ejb-server {
  (attribute auto-compile { r_boolean-Type }
   | element auto-compile { r_boolean-Type })?

  & (attribute create-database-schema { r_boolean-Type }
     | element create-database-schema { r_boolean-Type })?

  & (attribute cache-size { r_int }
     | element cache-size { r_int })?

  & (attribute cache-timeout { r_period }
     | element cache-timeout { r_period })?

  & (attribute data-source { r_jndi }
     | element data-source { r_jndi })?

  & (attribute config-directory { r_path-Type }
     | element config-directory { r_path-Type })?

  & (attribute ejb-descriptor { string }
     | element ejb-descriptor { r_string-Group })?

  & (attribute ejb-jar { r_path-Type }
     | element ejb-jar { r_path-Type })*

  & (attribute entity-manager-jndi-name { string }
     | element entity-manager-jndi-name { string })?

  & (attribute forbid-jvm-call { r_boolean-Type }
     | element forbid-jvm-call { r_boolean-Type })?

  & (attribute jdbc-isolation { string }
     | element jdbc-isolation { r_string-Group })?

  & (attribute jndi-local-prefix { string }
     | element jndi-local-prefix { r_string-Group })?

  & (attribute jndi-prefix { string }
     | element jndi-prefix { r_string-Group })?

  & (attribute jndi-name { string }
     | element jndi-name { r_string-Group })?

  & (attribute jndi-remote-prefix { string }
     | element jndi-remote-prefix { r_string-Group })?

  & (attribute load-lazy-on-transaction { r_boolean-Type }
     | element load-lazy-on-transaction { r_boolean-Type })?

  & (attribute message-consumer-max { r_int-Type }
     | element message-consumer-max { r_int-Type })?

  & (attribute read-data-source { r_jndi }
     | element read-data-source { r_jndi })?

  & (attribute resin-isolation { string }
     | element resin-isolation { r_string-Group })?

  & (attribute startup-mode { string }
     | element startup-mode { r_string-Group })?

  & (attribute transaction-timeout { r_period }
     | element transaction-timeout { r_period })?

  & (attribute validate-database-schema { r_boolean-Type }
     | element validate-database-schema { r_boolean-Type })?

  & (attribute jms-connection-factory { string }
     | element jms-connection-factory { r_string-Group })?

  & (attribute xa-data-source { r_jndi }
     | element xa-data-source { r_jndi })?

  & r_ejb_bean*
}

## experimental for EJB 3.0
r_ejb_bean = element bean {
  (attribute name { string }
   | element name { r_string-Group })?

  & (attribute type { string }
     | element type { r_string-Group })

  & r_init*
}

r_encoding =
  attribute encoding { string }
  | element encoding { r_string-Group }

r_enhancer = element enhancer {
  r_class-for-Enhancer*

  & r_method-for-Enhancer*
}

r_method-for-Enhancer = element method {
  (attribute annotation { r_class-Type }
   | element annotation { r_class-Type })

  & r_type

  & (attribute static { r_boolean-Type }
     | element static { r_boolean-Type })?

  & r_init?
}

r_class-for-Enhancer = element class {
  (attribute annotation { r_class-Type }
   | element annotation { r_class-Type })?

  & r_type

  & (attribute static { r_boolean-Type }
     | element static { r_boolean-Type })?

  & r_init?
}

r_dir =
  attribute dir { r_path-Type }
  | element dir { r_path-Type }

r_enhancing-loader = element enhancing-loader {
  r_path

  & r_enhancer*
}

r_expand-cleanup-fileset =
  attribute expand-cleanup-fileset { string }
  | element expand-cleanup-fileset {
      string
      | (element exclude { string }*
         & element include { string }*)
    }

r_expand-preserve-fileset =
  attribute expand-preserve-fileset { string }
  | element expand-preserve-fileset {
      string
      | (element exclude { string }*
         & element include { string }*)
    }

r_expand-directory =
 attribute expand-directory { string }
 | element expand-directory { r_string-Group }

r_expand-path =
 attribute expand-path { string }
 | element expand-path { r_string-Group }

r_fileset = element fileset {
  r_dir

  & r_fileset-exclude*

  & r_fileset-include*
}

r_fileset-exclude = element exclude {
  attribute name { string }
  | element name { r_string-Group }
  | string
}

r_fileset-include = element include {
  attribute name { string }
  | element name { r_string-Group }
  | string
}

r_formatter =
  attribute formatter { string }
  | element formatter { r_bean-Content }

r_grant = element grant {
  r_permission*
}

r_handback =
  attribute handback { string }
  | element handback {
      r_any-Group
    }

r_handler = element handler {
  r_bean-Content
}

rcore_if-Args =
  attribute test { string }

rcore_import = element rcore:import|r:import {
  ((attribute path { string }
    | element path { r_string-Group })

   | r_fileset)

  & (attribute optional { string }
     | element optional { r_string-Group })?
}

r_init = element init {
  r_any-Group
}

r_init-param-Content = 
  r_description*,

  (((attribute param-name { string } | element param-name { string }),
    (attribute param-value { string } | element param-value { string }))
   | attribute * { string }
   | element * - (param-name | param-value | r_description) { string })*

r_init-param = element init-param {
  r_init-param-Content
}

r_interceptor = element interceptor {
  r_class
}

r_interface = 
  attribute interface { string }
  | element interface { string }

r_ivy-loader = element ivy-loader {
  (attribute ivy-file { r_path-Type }
   | element ivy-file { r_path-Type })?

  & (element cache {
       attribute defaultCacheDir { r_path-Type }?
     })*

  & (element dependency {
       attribute artifact { string }?
       & attribute name { string }
       & attribute org { string }
       & attribute rev { string }?
     })*
}

r_jms-connection-factory = element jms-connection-factory {
  r_bean-Content
}

r_jms-queue = element jms-queue {
  r_bean-Content
}

r_jms-topic = element jms-topic {
  r_bean-Content
}

r_javac = element javac {
  (attribute compiler { string }
   | element compiler { r_string-Group })

   & (attribute args { string }
      | element args { r_string-Group })?

   & (attribute encoding { string }
      | element encoding { r_string-Group })?

   & (attribute max-batch { r_int-Type }
      | element max-batch { r_int-Type })?
}

r_jndi-bind = element jndi-bind {
  r_jndi-name

  & (attribute value { string }
     | element value { r_any })?
}

r_jndi-link = element jndi-link {
  (r_jndi-name

   | r_jndi-local-name)

  & (attribute factory { string }
     | element factory { r_string-Group })?

  & (attribute foreign-name { string }
     | element foreign-name { r_string-Group })?

  & r_init-param*
}

r_jndi-name =
  attribute jndi-name { string }
  | element jndi-name { r_string-Group }

r_jndi-local-name =
  attribute jndi-local-name { string }
  | element jndi-local-name { r_string-Group }

r_library-loader = element library-loader {
  r_path

  | r_fileset
}

r_mail = element mail {
  r_bean-Content

  & (attribute authenticator { string }
     | element authenticator { r_bean-Content })?

  & (attribute debug { r_boolean-Type }
     | element debug { r_boolean-Type })?

  & (attribute from { string }
     | element from { string })?

  & (attribute host { string }
     | element host { string })?

  & (attribute imap-host { string }
     | element imap-host { string })?

  & (attribute imap-port { string }
     | element imap-port { string })?

  & (attribute imap-ssl { r_boolean-Type }
     | element imap-ssl { r_boolean-Type })?

  & (attribute imap-user { string }
     | element imap-user { string })?

  & (attribute password { string }
     | element password { string })?

  & (attribute pop3-host { string }
     | element pop3-host { string })?

  & (attribute pop3-port { string }
     | element pop3-port { string })?

  & (attribute pop3-ssl { r_boolean-Type }
     | element pop3-ssl { r_boolean-Type })?

  & (attribute pop3-user { string }
     | element pop3-user { string })?

  & (attribute properties { string }
     | element properties { string })*

  & (attribute smtp-auth { string }
     | element smtp-auth { string })?

  & (attribute smtp-host { string }
     | element smtp-host { string })?

  & (attribute smtp-port { string }
     | element smtp-port { string })?

  & (attribute smtp-ssl { r_boolean-Type }
     | element smtp-ssl { r_boolean-Type })?

  & (attribute smtp-user { string }
     | element smtp-user { string })?

  & (attribute store-protocol { string }
     | element store-protocol { string })?

  & (attribute transport-protocol { string }
     | element transport-protocol { string })?

  & (attribute user { string }
     | element user { string })?
}

rcore_message =
  element rcore:log|r:log {
    attribute name { string }?
    & r_string-Group
  }
  | element rcore:message|r:message {
      attribute name { string }?
      & r_string-Group
    }

r_log = element log {
  r_logger-Content?

  & r_logger*

  & (r_handler | r_log-Content)

  & (r_formatter
     | (attribute format { string }
        | element format { r_string-Group }))?

  & r_mbean-name?
}

r_log-Content =
  (attribute path { r_path-Type }
   | element path { r_path-Type }

   | attribute path-format { string }
   | element path-format { r_path-Type })

  & (attribute archive-format { string }
     | element archive-format { r_string-Group })?

  & (attribute rollover-cron { string }
     | element rollover-cron { string })?

  & (attribute rollover-period { r_period }
     | element rollover-period { r_period })?

  & (attribute rollover-size { r_kbytes }
     | element rollover-size { r_kbytes })?

  & (attribute rollover-count { r_kbytes }
     | element rollover-count { r_kbytes })?

  & (attribute timestamp { string }
     | element timestamp { r_string-Group })?


r_logger = element logger {
  r_logger-Content
  
  & r_bean-Custom*
}

r_logger-Content =
  (attribute name { string }
   | element name { r_string-Group })

  & (attribute level { string }
     | element level { r_string-Group })?

  & (attribute use-parent-handlers { r_boolean-Type }
     | element use-parent-handlers { r_boolean-Type })?

r_log-handler = element log-handler {
  r_bean-Content

  & r_log-Content?

  & (r_formatter
     | (attribute format { string }
        | element format { r_string-Group }))?

  & (attribute filter { string }
     | element filter { r_bean-Content })?

  & (attribute level { string }
     | element level { string })?
}

r_mbean = element mbean {
  r_name,

  (r_type,

   r_arg*)?,

  (r_init*

   & r_mbean-listener*)
}

r_mbean-class = 
  attribute mbean-class { string }
  | element mbean-class { string }

r_mbean-name = 
  attribute mbean-name { string }
  | element mbean-name { r_string-Group }

r_mbean-interface = 
  attribute mbean-interface { string }
  | element mbean-interface { r_string-Group }

r_mbean-listener = element mbean-listener {
  r_mbean-name,

  r_handback*
}

r_module = element module {
   r_module-name-Type
}

r_module-name-Type =
  (attribute org { string }
     | element org { string })?

  & (attribute module { string }
     | element module { string })?

  & (attribute name { string }
     | element name { string })

  & (attribute version { string }
     | element version { string })?

r_name =
  attribute name { string }
  | element name { r_string-Group }

r_path =
  attribute path { r_path-Type }
  | element path { r_path-Type }

r_permission = element permission {
  r_type,

  r_arg*
}

## deprecated. use jpa-persistence-unit instead
r_jpa-persistence = element jpa-persistence {
  (attribute create-database-schema { r_boolean-Type }
     | element create-database-schema { r_boolean-Type })?

  & (attribute cache-size { r_int }
     | element cache-size { r_int })?

  & (attribute cache-timeout { r_period }
     | element cache-timeout { r_period })?

  & (attribute data-source { r_jndi }
     | element data-source { r_jndi })?

  & (attribute entity-manager-jndi-name { string }
     | element entity-manager-jndi-name { string })?

  & (attribute jdbc-isolation { string }
     | element jdbc-isolation { r_string-Group })?

  & (attribute load-lazy-on-transaction { r_boolean-Type }
     | element load-lazy-on-transaction { r_boolean-Type })?

  & r_persistence-unit*
  
  & r_persistence-unit-default*

  & (attribute read-data-source { r_jndi }
     | element read-data-source { r_jndi })?

  & (attribute resin-isolation { string }
     | element resin-isolation { r_string-Group })?

  & (attribute transaction-timeout { r_period }
     | element transaction-timeout { r_period })?

  & (attribute validate-database-schema { r_boolean-Type }
     | element validate-database-schema { r_boolean-Type })?

  & (attribute xa-data-source { r_jndi }
     | element xa-data-source { r_jndi })?
}

r_jpa-persistence-default = element jpa-persistence-default {
  r_persistence-unit-Content
}

r_property-Type = 
      element property {
         (attribute name { string } | element name { string }),
         (attribute value { string } | element value { string })
      }*

r_persistence-unit-Content =
  (attribute exclude-unlisted-classes { r_boolean-Type }
     | element exclude-unlisted-classes { r_boolean-Type })*
   
  & (attribute jta-data-source { r_jndi }
     | element jta-data-source { r_jndi })?

  & (attribute non-jta-data-source { r_jndi }
     | element non-jta-data-source { r_jndi })?
   
  & element properties {
      r_property-Type
    }?
   
  & (attribute provider { string }
     | element provider { string })?
   
  & (attribute shared-cache-mode { string }
     | element shared-cache-mode { string })?
   
  & (attribute transaction-type { "JTA" | "RESOURCE_LOCAL" }
     | element transaction-type { "JTA" | "RESOURCE_LOCAL" })?
   
  & (attribute validation-mode { string }
     | element validation-mode { string })?
   
r_jpa-persistence-unit = element jpa-persistence-unit {
  (attribute name { string }
   | element name { string })

  & (attribute class { r_class }
     | element class { r_class })*
   
  & (attribute description { string }
     | element description { string })?
   
  & (attribute jar-file { r_path }
     | element jar-file { r_path })*
   
  & (attribute mapping-file { r_path }
     | element mapping-file { r_path })?
   
  & r_persistence-unit-Content
}
   
r_jpa-persistence-unit-default = element jpa-persistence-unit-default {
  r_persistence-unit-Content
}

r_project-loader = element project-loader {
  r_path
}  

r_reference = element reference {
  r_jndi-name,

  (attribute factory { string  } | element factory { r_string-Group }),

  r_init-param*
}

r_remote-client = element remote-client {
  r_interface

  & r_bean-Content
}

## r_resin-type =
##  attribute rcore:type { string }
##  | attribute rcore:class { string }
##  | attribute resin:type { string }
r_resin-type =
  r_bean-Custom

r_resource = element resource {
  (r_jndi-name?

   & r_name?

   & r_var?

   & r_mbean-name?

   & r_mbean-interface?),

  ((r_type | r_class),

   r_arg*)?,

  (r_init*

   & (attribute local-transaction-optimization { r_boolean-Type }
      | element local-transaction-optimization { r_boolean-Type })?

   & r_mbean-listener*

   & (attribute shareable { r_boolean-Type }
      | element shareable { r_boolean-Type })?
  )
}

r_resource-adapter = element resource-adapter {
  r_bean-Content
}

r_resource-default = element resource-default {
  r_env-Content
}

r_resource-deploy = element (rar-deploy|resource-deploy) {
  (attribute path { string }
   | element path { r_string-Group })

  & r_expand-path?

  & r_expand-directory?

  & r_resource-default?
}

## Configures role to user mapping for the current environment
r_role-map = element role-map {
  r_bean-Content
}

r_rollover-count =
  attribute rollover-count { r_kbytes }
  | element rollover-count { r_kbytes }

r_rollover-period =
  attribute rollover-period { r_period }
  | element rollover-period { r_period }

r_rollover-size =
  attribute rollover-size { r_kbytes }
  | element rollover-size { r_kbytes }

r_servlet-hack =
  attribute servlet-hack { r_boolean-Type }
  | element servlet-hack { r_boolean-Type }

rcore_set = element rcore:set|r:set {
  ((attribute jndi-name { string }
    | element jndi-name { r_string-Group })
   & (attribute value { r_object-Type }
      | element value { r_object-Type }
      | attribute default { r_object-Type }
      | element default { r_object-Type }
      | string ))
  | attribute * - jndi-name { string }+
}

r_scope =
  attribute scope { string }
  | element scope { string }

r_scheduled-task = element scheduled-task {
  r_bean-Content

  & (attribute cron { string }
     | element cron { string })?

  & (attribute delay { r_period-Type }
     | element delay { r_period-Type })?

  & (attribute method { string }
     | element method { string })?

  & (attribute period { r_period-Type }
     | element period { r_period-Type })?

  & (attribute task { string }
     | element task { r_bean-Content })?

  & (attribute url { string }
     | element url { string })?
}
  
r_simple-loader = element simple-loader {
  r_path,

  (attribute prefix { string }
   | element prefix {r_string-Group})?
}

r_stderr-log = element stderr-log {
  r_log-Content
}

r_stdout-log = element stdout-log {
  r_log-Content
}

r_system-property = element system-property {
  (attribute * { string })+
}

r_temp-dir =
  attribute temp-dir { r_path-Type }
  | element temp-dir { r_path-Type }

r_tree-loader = element tree-loader {
  r_path
}

r_type =
  attribute type { string }
  | element type { r_string-Group }

r_uri =
  attribute uri { string }
  | element uri { r_string-Group }

r_url =
  attribute url { string }
  | element url { r_string-Group }

r_var =
  attribute var { string }
  | element var { r_string-Group }

r_verify-client =
  attribute verify-client { r_verify-client-Type }
  | element verify-client { r_verify-client-Type }

r_verify-client-Type =
  "optional-no-ca"
  | "optional"
  | "require"

r_web-service-client = element web-service-client {
  r_url

  & r_binding*

  & r_class?

  & r_jndi-name?

  & r_name?

  & r_scope?

  & r_interface?

  & (element jaxb-package { string }* | element jaxb-class { string }*)?
}

rcore_when-Args =
  attribute test { string }

r_work-dir =
  attribute work-dir { r_path-Type }
  | element work-dir { r_path-Type }
