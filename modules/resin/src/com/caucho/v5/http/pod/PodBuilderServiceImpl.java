/*
 * Copyright (c) 1998-2015 Caucho Technology -- all rights reserved
 *
 * This file is part of Baratine(TM)
 *
 * Each copy or derived work must preserve the copyright notice and this
 * notice unmodified.
 *
 * Baratine is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Baratine is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty
 * of NON-INFRINGEMENT.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Baratine; if not, write to the
 *
 *   Free Software Foundation, Inc.
 *   59 Temple Place, Suite 330
 *   Boston, MA 02111-1307  USA
 *
 * @author Scott Ferguson
 */

package com.caucho.v5.http.pod;

import io.baratine.service.OnInit;
import io.baratine.service.Result;

import java.io.IOException;
import java.util.HashMap;
import java.util.Objects;

import com.caucho.v5.amp.AmpSystem;
import com.caucho.v5.amp.ServiceManagerAmp;
import com.caucho.v5.baratine.ServiceServer;
import com.caucho.v5.baratine.ServiceServer.PodBuilder;
import com.caucho.v5.bartender.BartenderSystem;
import com.caucho.v5.bartender.ServerBartender;
import com.caucho.v5.bartender.pod.PodBartender;
import com.caucho.v5.bartender.pod.PodsManagerService;
import com.caucho.v5.util.CurrentTime;
import com.caucho.v5.vfs.PathImpl;
import com.caucho.v5.vfs.Vfs;
import com.caucho.v5.vfs.WriteStream;


/**
 * Local interface to the pods service.
 */
public class PodBuilderServiceImpl
{
  // private final PodsServiceClusterImpl _serviceCluster;
  //private final PodsConfigServiceImpl _serviceApps;
  
  private HashMap<String,PodState> _podStateMap = new HashMap<>();
  private PodsManagerService _podsClusterService;
  
  private ServerBartender _serverSelf;
  private PodsDeployService _podsDeployService;
  
  PodBuilderServiceImpl(PodContainer podContainer)
  {
    // _serviceCluster = new PodsServiceClusterImpl();
    _podsDeployService = null;//podContainer.getDeployService();
  }
  
  @OnInit
  public void onInit()
  {
    //_serviceCluster.onInit();
    //_serviceApps.onInit();
    
    _serverSelf = BartenderSystem.getCurrentSelfServer();
    
    ServiceManagerAmp manager = AmpSystem.getCurrentManager();
    
    _podsClusterService = manager.service("pod://cluster_root" + PodsManagerService.ADDRESS)
                                 .as(PodsManagerService.class); 
  }
  
  /**
   * Finds the controller for a pod node.
   * 
   * @param podName name of the pod
   * @param nodeIndex index of the node
   */
  /*
  public PodAppController findController(String podName, int nodeIndex)
  {
    return _serviceApps.findController(podName, nodeIndex);
  }
  */
  
  /**
   * Returns all active controllers.
   */
  /*
  public List<DeployHandle<?>> getActiveHandles()
  {
    return _serviceApps.getActiveHandles();
  }
  */
  
  /**
   * Builds a pod based on the builder.
   */
  public void buildPod(PodBuilder builder, Result<Void> result)
  {
    writePod(builder);
    
    _podsClusterService.update(result.of((x,r)->_podsDeployService.update(r)));
    
    //_serviceApps.update(Result.ignore());
  }
   
  /**
   * Builds a pod based on the builder.
   */
  private void writePod(PodBuilder builder)
  {
    Objects.requireNonNull(builder);
    
    String podName = builder.getName();
    
    PathImpl path = Vfs.lookup("bfs://" + PodBuilderService.CONFIG_DIR + "/50-" + podName + ".cf");
    
    try (WriteStream out = path.openWrite()) {
      out.println("# generated by " + getClass().getSimpleName());
      
      out.println("pod " + podName + " {");
      
      PodBartender.PodType type = builder.getType();
      
      if (type != null && PodBartender.PodType.lazy != type) {
        out.println("  type " + type + ";");
      }
      
      if (builder.getSize() > 0) {
        out.println("  size " + builder.getSize() + ";");
      }
      
      for (ServiceServer.Server server : builder.getServers()) {
        out.println("  server \"" + server.getAddress() + "\" " + server.getPort() + ";"); 
      }
      
      for (String appPath : builder.getApplicationPaths()) {
        out.println("  archive \"" + appPath + "\";");
      }
      
      if (builder.getJournalMaxCount() >= 0) {
        out.println("  journal-max-count " + builder.getJournalMaxCount() + ";"); 
      }
      
      if (builder.getJournalDelay() >= 0) {
        out.println("  journal-delay " + builder.getJournalDelay() + "ms;");
      }
      
      out.println("}");
    } catch (IOException e) {
      throw new RuntimeException();
    }
  }
  
  public PodBartender findPod(String podName)
  {
    BartenderSystem bartender = BartenderSystem.getCurrent();
    
    return bartender.findPod(podName);
  }

  public void onPodAppStart(String id, String tag)
  {
    PodState podState = getPodState(getPodName(id));
    
    podState.onStart(id);
    
    _podsClusterService.onPodAppStart(id, _serverSelf.getId(), tag);
  }
  
  public void onPodAppStop(String id, String tag)
  {
    PodState podState = getPodState(getPodName(id));
    
    podState.onStop(id);
    
    _podsClusterService.onPodAppStop(id, _serverSelf.getId(), tag);
  }
  
  private String getPodName(String nodeId)
  {
    if (! nodeId.startsWith("pods/")) {
      throw new IllegalArgumentException(nodeId);
    }
    
    int p = nodeId.indexOf('/');
    String podNode = nodeId.substring(p + 1);
    
    int q = podNode.indexOf('.');
    
    if (q > 0) {
      return podNode.substring(0, q);
    }
    else {
      return podNode;
    }
  }
  
  private PodState getPodState(String podName)
  {
    PodState podState = _podStateMap.get(podName);
    
    if (podState == null) {
      podState = new PodState(podName);
    }
    
    return podState;
  }
  
  /**
   * Flush/sync for caller.
   */
  public void update(Result<Void> result)
  {
    //_serviceCluster.update(result.from((x,r)->_serviceApps.update(r)));
    // _serviceApps.update(result);
  }
  
  //
  // inner classes
  
  private static class PodState {
    private final String _podName;
    
    private final HashMap<String,PodNodeState> _nodeMap = new HashMap<>();
    
    PodState(String podName)
    {
      _podName = podName;
    }
    
    void onStart(String id)
    {
      getPodNodeState(id).onStart();
    }
    
    void onStop(String id)
    {
      getPodNodeState(id).onStop();
    }
    
    private PodNodeState getPodNodeState(String nodeName)
    {
      PodNodeState nodeState = _nodeMap.get(nodeName);
      
      if (nodeState == null) {
        nodeState = new PodNodeState(nodeName);
      }
      
      return nodeState;
    }
    
    public String toString()
    {
      return getClass().getSimpleName() + "[" + _podName + "]";
    }
  }
  
  private static class PodNodeState {
    private final String _nodeName;
    
    private boolean _isActive;
    private long _updateTime;
    
    PodNodeState(String nodeName)
    {
      _nodeName = nodeName;
    }
    
    boolean isActive()
    {
      return _isActive;
    }
    
    void onStart()
    {
      _isActive = true;
      _updateTime = CurrentTime.getCurrentTime();
    }
    
    void onStop()
    {
      _isActive = false;
      _updateTime = CurrentTime.getCurrentTime();
    }
    
    public String toString()
    {
      return getClass().getSimpleName() + "[" + _nodeName + "]";
    }
  }
  
}
